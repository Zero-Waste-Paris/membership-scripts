openapi: 3.0.3
info:
  title: ZWP Dashboard
  version: 0.0.1
servers:
  - url: http://localhost:8000
paths:
  /api/trigger-import-run:
    get: # should perhaps be a POST for semantic reasons, but has to be GET in order to be usable by our web cron
      summary: Trigger a run to fetch the last registrations from helloasso and register them in the needed groups
      parameters:
        - name: debug
          in: query
          required: false
          schema:
            type: boolean
        - name: token
          in: query
          required: true
          schema:
            type: string
      responses:
        "204":
          description: OK
  /api/slack-accounts-to-reactivate:
    get:
      summary: "Return the emails of members which have a deactivated slack (which likely need to be manually re-enabled)"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimestampedSlackUserList'
  /api/slack-accounts-to-deactivate:
    get:
      summary: "Return the email that match an active Slack account but not an up to date member"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimestampedSlackUserList'
  /api/log-error-if-there-are-slack-accounts-to-deactivate:
    get:
      summary: "check if there are slack accounts to deactivate and log an error (hence, possibly, get an alert) if there are any"
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
      responses:
        "204":
          description: OK
  /api/update-user-password:
    post:
      summary: "Make it possible for a user to change his or her password"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - currentPassword
                - newPassword
              properties:
                newPassword:
                  type: string
                currentPassword:
                  type: string
      responses:
        "204":
          description: OK
        "400":
          description: Missing new password
        "401":
          description: User is not authenticated
        "403":
          description: currentPassword is incorrect
  /api/has-totp-enabled:
    get:
      summary: finds out whether the user has totp activated
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: boolean
  /api/disable-totp:
    post:
      summary: disable totp for the user
      responses:
        "204":
          description: OK
  /api/generate-totp-secret:
    post:
      summary: generates and returns a totp secret for the user (but does not opt-in the user yet)
      responses:
        "200":
          description: QR code that the user should scan
          content:
            image/png:
              schema:
                type: string
                format: binary
        "400":
          description: user already enabled totp
        "401":
          description: user is not authenticated
  /api/enable-totp:
    post:
      summary: enable totp for the user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - totp
              properties:
                totp:
                  type: string
      responses:
        "204":
          description: Totp is successfully enabled for the user
        "400":
          description: Totp has not been enabled for the user (probably because the submitted code is not ok)
  /api/members:
    get:
      summary: Get the list of members (both current and former ones)
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - id
                    - firstName
                    - lastName
                    - email
                    - helloAssoLastRegistrationEventId
                    - firstRegistrationDate
                    - isZWProfessional
                    - lastRegistrationDate
                    - additionalEmails
                    - isRegistrationUpToDate
                  properties:
                    userId:
                      type: integer
                    firstName:
                      type: string
                    lastName:
                      type: string
                    email:
                      type: string
                    postalCode:
                      type: string
                    helloAssoLastRegistrationEventId:
                      type: integer
                    city:
                      type: string
                    howDidYouKnowZwp:
                      type: string
                    wantToDo:
                      type: string
                    firstRegistrationDate:
                      type: string
                      format: date
                    phone:
                      type: string
                    lastRegistrationDate:
                      type: string
                      format: date
                    isZWProfessional:
                      type: boolean
                    additionalEmails:
                      type: array
                      items:
                        type: string
                        format: email
                    isRegistrationUpToDate:
                      type: boolean
components:
  schemas:
    TimestampedSlackUserList:
      type: object
      required:
        - isFresh
        - timestamp
        - members
      properties:
        isFresh:
          type: boolean
        timestamp:
          type: integer
        members:
          type: array
          items:
            type: string
            format: email
