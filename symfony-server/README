====== Install the dependencies ======

After having generated the php bundle, run from this directory:

    composer install


====== Setup a local conf ======

    cp .env .env.local

then override the values want

====== Create the database ======
To create the database (it will be a sqlite one in debug) run from this directory:

    php bin/console doctrine:database:create

and then, to create the schema:

    php bin/console doctrine:schema:create

and then, to initialize a value for the last successful run date:

    php bin/console doctrine:database:initialize-last-successful-run-date 2022-01-01

(or whatever date would make sense).

for more info about how the database ORM and its integration works, see:
https://symfony.com/doc/current/doctrine.html

====== Setting up the Google API ======
We're currently using a deprecated authent'. In a nutshell, the simplest way to get credentials and
access tokens is to retrieve them from prod.

Here is some doc to fix this:
- The migration doc: https://developers.google.com/identity/protocols/oauth2/resources/oob-migration
- What seems to be a generic doc: https://developers.google.com/workspace/guides/get-started

====== Starting the local dev server======
See [Symfony's doc](https://symfony.com/doc/current/setup/symfony_server.html) for more info, but basically,
after installing the [symfony binary](https://symfony.com/download), you can run:

    symfony server:start --no-tls

====== Generating a migration file (during development) ======

Our prod uses mysql so we need to generate migration files that target mysql. So override the key
DATABASE_URL in .env.local with a mysql local connection string, ie, something like

    DATABASE_URL="mysql://<user>:<password>@localhost:3306/<database_name>?serverVersion=14.14"

The user and password must be valid credentials against a local server, but the database should not exist.

Then run:

    php bin/console doctrine:database:create    # creates an empty database
    php bin/console doctrine:migrations:migrate # align the schema to the latest existing migration file
    php bin/console doctrine:migrations:diff    # creates the migration file (to commit in git)

Then, during the next deployment in prod (or preprod), run (from the targeted environment):

    php bin/console doctrine:migrations:migrate # This will apply in prod the newly generated migration files

(and then remove the DATABASE_URL from the local .env.local file)
