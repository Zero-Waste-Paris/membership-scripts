import groovy.swing.SwingBuilder

def assertFileExists(String file) {
	if ( ! new File(file).exists()) {
		def msg = "File ${file} is needed but is missing. Setup may not be completed. See README for more info"
		System.err.println(msg)
		throw new Exception(msg)
	}
}

def configsDir = "$rootDir/scripts/"

ext {
	symfonyDir = "$rootDir/symfony-server"
	symfonyConsole = "$symfonyDir/bin/console"
}

fileTree(configsDir).matching(new PatternSet().setIncludes(["*-config"])).visit { // TODO: this recurses which is pointless: it would be more efficient to have a way to look only for directories at the top level
	def dirName = it.file.name
	def configPath = configsDir + dirName
	def slackConfigPath = configPath + "/slack-config"
	def localConfFile = configPath + "/deploysymfony-config.sh"
	def deploymentEnvironment = dirName.substring(0, dirName.length() - "-config".length()).capitalize()

	tasks.register("deployTo${deploymentEnvironment}") {
		group "deployment"
		description "Deploy to ${deploymentEnvironment}"

		dependsOn 'generateSources:generateSources'
		dependsOn 'checkGitRepoClean'

		doLast {
			println "Going to deploy to ${deploymentEnvironment}"
		}
	}

	tasks.register("assert${deploymentEnvironment}FilesExist") {
		doLast {
			assertFileExists(configPath + "/htaccess")
			assertFileExists(configPath + "/symfony.conf")
			assertFileExists(slackConfigPath + "/config.json")
			assertFileExists(localConfFile)
		}
	}
}

tasks.register('checkGitRepoClean', Exec) {
	commandLine "git", "status", "--porcelain"
	standardOutput = new ByteArrayOutputStream()

	doLast {
		def statusOutput = standardOutput.toString()
		if (statusOutput == "") {
			println("git repo clean")
		} else {
			println("git repo NOT clean:")
			println(statusOutput)
			println("proceed anyway? [yN]:")

			def console = System.console()
			def input = (console) ? console.readLine().trim() : new Scanner(System.in).nextLine().trim()

			if (input != "y") {
				throw new Exception("The repo is not clean and the user prefered to abort")
			}
			println("Proceeding nevertheless")
		}
	}
}

def createTestDb = createSymfonyTestCommandTask("createTestDatabase", "doctrine:database:create", message:"Creating the test database")
def dropTestDbSchema = createSymfonyTestCommandTask("dropTestDatabaseSchema", "doctrine:schema:drop", "--force", message: "Dropping the schema of the test database")

tasks.register("runSymfonyTests") {
	group = "symfony"
	description = "run the test against the local code"
	dependsOn createTestDb
}

def createSymfonyTestCommandTask(Map options = [:], String taskName, String... symfonyCommand) {
	return tasks.register(taskName, Exec) {
		workingDir symfonyDir

		def cli = [symfonyConsole, "--env=test"]
		cli.addAll(symfonyCommand)
		commandLine(cli)
		environment "APP_ENV", "test"

		if (options.get("stdin")) {
			standardInput = new ByteArrayInputStream(options.get("stdin").getBytes('UTF-8'))
		}

		if (options.get("message")) {
			doFirst {
				println options.get("message")
			}
		}

		if (options.get("previousTask")) {
			dependsOn(options.get("previousTask"))
		}
	}
}

